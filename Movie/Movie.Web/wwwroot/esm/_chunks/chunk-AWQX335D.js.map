{
  "version": 3,
  "sources": ["external-global:Serenity.Extensions", "../../../Modules/ServerTypes/MovieDB/GenreColumns.ts", "../../../Modules/ServerTypes/MovieDB/GenreRow.ts", "../../../Modules/ServerTypes/MovieDB/GenreService.ts", "../../../Modules/ServerTypes/MovieDB/MovieColumns.ts", "../../../Modules/MovieDB/Movie/GenreListFormatter.ts", "../../../Modules/ServerTypes/Modules/MovieDB.Movie.MovieKind.ts", "../../../Modules/ServerTypes/MovieDB/MovieRow.ts", "../../../Modules/ServerTypes/MovieDB/MovieService.ts", "../../../Modules/ServerTypes/MovieDB/PersonColumns.ts", "../../../Modules/ServerTypes/MovieDB/PersonRow.ts", "../../../Modules/ServerTypes/MovieDB/PersonService.ts", "../../../Modules/ServerTypes/MovieDB/GenreForm.ts", "../../../Modules/ServerTypes/MovieDB/MovieCastColumns.ts", "../../../Modules/ServerTypes/MovieDB/MovieCastForm.ts", "../../../Modules/ServerTypes/MovieDB/MovieCastRow.ts", "../../../Modules/ServerTypes/MovieDB/MovieCastService.ts", "../../../Modules/ServerTypes/MovieDB/MovieForm.ts", "../../../Modules/MovieDB/MovieCast/MovieCastEditor.tsx", "../../../Modules/ServerTypes/MovieDB/MovieGenresRow.ts", "../../../Modules/ServerTypes/MovieDB/MovieGenresService.ts", "../../../Modules/ServerTypes/MovieDB/PersonForm.ts"],
  "sourcesContent": ["module.exports = Serenity.Extensions;", "\uFEFFimport { ColumnsBase, fieldsProxy } from \"@serenity-is/corelib\";\r\nimport { Column } from \"@serenity-is/sleekgrid\";\r\nimport { GenreRow } from \"./GenreRow\";\r\n\r\nexport interface GenreColumns {\r\n    GenreId: Column<GenreRow>;\r\n    Name: Column<GenreRow>;\r\n}\r\n\r\nexport class GenreColumns extends ColumnsBase<GenreRow> {\r\n    static readonly columnsKey = 'MovieDB.Genre';\r\n    static readonly Fields = fieldsProxy<GenreColumns>();\r\n}", "\uFEFFimport { getLookup, getLookupAsync, fieldsProxy } from \"@serenity-is/corelib\";\n\nexport interface GenreRow {\n    GenreId?: number;\n    Name?: string;\n}\n\nexport abstract class GenreRow {\n    static readonly idProperty = 'GenreId';\n    static readonly nameProperty = 'Name';\n    static readonly localTextPrefix = 'MovieDB.Genre';\n    static readonly lookupKey = 'MovieDB.Genre';\n\n    /** @deprecated use getLookupAsync instead */\n    static getLookup() { return getLookup<GenreRow>('MovieDB.Genre') }\n    static async getLookupAsync() { return getLookupAsync<GenreRow>('MovieDB.Genre') }\n\n    static readonly deletePermission = 'Administration:General';\n    static readonly insertPermission = 'Administration:General';\n    static readonly readPermission = 'Administration:General';\n    static readonly updatePermission = 'Administration:General';\n\n    static readonly Fields = fieldsProxy<GenreRow>();\n}", "\uFEFFimport { SaveRequest, SaveResponse, ServiceOptions, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse, serviceRequest } from \"@serenity-is/corelib\";\nimport { GenreRow } from \"./GenreRow\";\n\nexport namespace GenreService {\n    export const baseUrl = 'MovieDB/Genre';\n\n    export declare function Create(request: SaveRequest<GenreRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): PromiseLike<SaveResponse>;\n    export declare function Update(request: SaveRequest<GenreRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): PromiseLike<SaveResponse>;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): PromiseLike<DeleteResponse>;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<GenreRow>) => void, opt?: ServiceOptions<any>): PromiseLike<RetrieveResponse<GenreRow>>;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<GenreRow>) => void, opt?: ServiceOptions<any>): PromiseLike<ListResponse<GenreRow>>;\n\n    export const Methods = {\n        Create: \"MovieDB/Genre/Create\",\n        Update: \"MovieDB/Genre/Update\",\n        Delete: \"MovieDB/Genre/Delete\",\n        Retrieve: \"MovieDB/Genre/Retrieve\",\n        List: \"MovieDB/Genre/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>GenreService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "\uFEFFimport { ColumnsBase, fieldsProxy } from \"@serenity-is/corelib\";\nimport { Column } from \"@serenity-is/sleekgrid\";\nimport { GenreListFormatter } from \"../../MovieDB/Movie/GenreListFormatter\";\nimport { MovieKind } from \"../Modules/MovieDB.Movie.MovieKind\";\nimport { MovieRow } from \"./MovieRow\";\n\nexport interface MovieColumns {\n    MovieId: Column<MovieRow>;\n    Title: Column<MovieRow>;\n    Description: Column<MovieRow>;\n    Storyline: Column<MovieRow>;\n    Year: Column<MovieRow>;\n    ReleaseDate: Column<MovieRow>;\n    Runtime: Column<MovieRow>;\n    Kind: Column<MovieRow>;\n    GenreList: Column<MovieRow>;\n}\n\nexport class MovieColumns extends ColumnsBase<MovieRow> {\n    static readonly columnsKey = 'MovieDB.Movie';\n    static readonly Fields = fieldsProxy<MovieColumns>();\n}\n\nqueueMicrotask(() => [MovieKind, GenreListFormatter]); // referenced types", "import { Decorators, Formatter, Lookup } from \"@serenity-is/corelib\";\r\nimport { FormatterContext } from \"@serenity-is/sleekgrid\";\r\nimport { GenreRow } from \"@/ServerTypes/MovieDB/GenreRow\";\r\n\r\nlet lookup: Lookup<GenreRow>;\r\nlet promise: Promise<Lookup<GenreRow>>;\r\n\r\n@Decorators.registerFormatter('MovieTutorial.GenreListFormatter')\r\nexport class GenreListFormatter implements Formatter {\r\n\r\n    format(ctx: FormatterContext) {\r\n\r\n        let idList = ctx.value as number[];\r\n        if (!idList || !idList.length)\r\n            return \"\";\r\n\r\n        let byId = lookup?.itemById;\r\n        if (byId) {\r\n            return idList.map(x => {\r\n                var z = byId[x];\r\n                return ctx.escape(z == null ? x : z.Name);\r\n            }).join(\", \");\r\n        }\r\n\r\n        promise ??= GenreRow.getLookupAsync().then(l => {\r\n            lookup = l;\r\n            try {\r\n                ctx.grid?.invalidate();\r\n            }\r\n            finally {\r\n                lookup = null;\r\n                promise = null;\r\n            }\r\n        }).catch(() => promise = null);\r\n\r\n        return `<i class=\"fa fa-spinner\"></i>`;\r\n    }\r\n}", "\uFEFFimport { Decorators } from \"@serenity-is/corelib\";\n\nexport enum MovieKind {\n    Film = 1,\n    TvSeries = 2,\n    MiniSeries = 3\n}\nDecorators.registerEnumType(MovieKind, 'Movie.Modules.MovieDB.Movie.MovieKind', 'MovieDB.MovieKind');", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib\";\nimport { MovieKind } from \"../Modules/MovieDB.Movie.MovieKind\";\n\nexport interface MovieRow {\n    MovieId?: number;\n    Title?: string;\n    Description?: string;\n    Storyline?: string;\n    Year?: number;\n    ReleaseDate?: string;\n    Runtime?: number;\n    Kind?: MovieKind;\n    GenreList?: number[];\n}\n\nexport abstract class MovieRow {\n    static readonly idProperty = 'MovieId';\n    static readonly nameProperty = 'Title';\n    static readonly localTextPrefix = 'MovieDB.Movie';\n    static readonly deletePermission = 'Administration:General';\n    static readonly insertPermission = 'Administration:General';\n    static readonly readPermission = 'Administration:General';\n    static readonly updatePermission = 'Administration:General';\n\n    static readonly Fields = fieldsProxy<MovieRow>();\n}", "\uFEFFimport { SaveRequest, SaveResponse, ServiceOptions, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse, serviceRequest } from \"@serenity-is/corelib\";\nimport { MovieRow } from \"./MovieRow\";\n\nexport namespace MovieService {\n    export const baseUrl = 'MovieDB/Movie';\n\n    export declare function Create(request: SaveRequest<MovieRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): PromiseLike<SaveResponse>;\n    export declare function Update(request: SaveRequest<MovieRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): PromiseLike<SaveResponse>;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): PromiseLike<DeleteResponse>;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<MovieRow>) => void, opt?: ServiceOptions<any>): PromiseLike<RetrieveResponse<MovieRow>>;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<MovieRow>) => void, opt?: ServiceOptions<any>): PromiseLike<ListResponse<MovieRow>>;\n\n    export const Methods = {\n        Create: \"MovieDB/Movie/Create\",\n        Update: \"MovieDB/Movie/Update\",\n        Delete: \"MovieDB/Movie/Delete\",\n        Retrieve: \"MovieDB/Movie/Retrieve\",\n        List: \"MovieDB/Movie/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>MovieService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "\uFEFFimport { ColumnsBase, fieldsProxy } from \"@serenity-is/corelib\";\nimport { Column } from \"@serenity-is/sleekgrid\";\nimport { Gender } from \"../Modules/MovieDB.Person.Gender\";\nimport { PersonRow } from \"./PersonRow\";\n\nexport interface PersonColumns {\n    PersonId: Column<PersonRow>;\n    FirstName: Column<PersonRow>;\n    LastName: Column<PersonRow>;\n    BirthDate: Column<PersonRow>;\n    BirthPlace: Column<PersonRow>;\n    Gender: Column<PersonRow>;\n    Height: Column<PersonRow>;\n}\n\nexport class PersonColumns extends ColumnsBase<PersonRow> {\n    static readonly columnsKey = 'MovieDB.Person';\n    static readonly Fields = fieldsProxy<PersonColumns>();\n}\n\nqueueMicrotask(() => [Gender]); // referenced types", "\uFEFFimport { getLookup, getLookupAsync, fieldsProxy } from \"@serenity-is/corelib\";\nimport { Gender } from \"../Modules/MovieDB.Person.Gender\";\n\nexport interface PersonRow {\n    PersonId?: number;\n    FirstName?: string;\n    LastName?: string;\n    BirthDate?: string;\n    BirthPlace?: string;\n    Gender?: Gender;\n    Height?: number;\n    FullName?: string;\n}\n\nexport abstract class PersonRow {\n    static readonly idProperty = 'PersonId';\n    static readonly nameProperty = 'FullName';\n    static readonly localTextPrefix = 'MovieDB.Person';\n    static readonly lookupKey = 'MovieDB.Person';\n\n    /** @deprecated use getLookupAsync instead */\n    static getLookup() { return getLookup<PersonRow>('MovieDB.Person') }\n    static async getLookupAsync() { return getLookupAsync<PersonRow>('MovieDB.Person') }\n\n    static readonly deletePermission = 'Administration:General';\n    static readonly insertPermission = 'Administration:General';\n    static readonly readPermission = 'Administration:General';\n    static readonly updatePermission = 'Administration:General';\n\n    static readonly Fields = fieldsProxy<PersonRow>();\n}", "\uFEFFimport { SaveRequest, SaveResponse, ServiceOptions, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse, serviceRequest } from \"@serenity-is/corelib\";\nimport { PersonRow } from \"./PersonRow\";\n\nexport namespace PersonService {\n    export const baseUrl = 'MovieDB/Person';\n\n    export declare function Create(request: SaveRequest<PersonRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): PromiseLike<SaveResponse>;\n    export declare function Update(request: SaveRequest<PersonRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): PromiseLike<SaveResponse>;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): PromiseLike<DeleteResponse>;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<PersonRow>) => void, opt?: ServiceOptions<any>): PromiseLike<RetrieveResponse<PersonRow>>;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<PersonRow>) => void, opt?: ServiceOptions<any>): PromiseLike<ListResponse<PersonRow>>;\n\n    export const Methods = {\n        Create: \"MovieDB/Person/Create\",\n        Update: \"MovieDB/Person/Update\",\n        Delete: \"MovieDB/Person/Delete\",\n        Retrieve: \"MovieDB/Person/Retrieve\",\n        List: \"MovieDB/Person/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>PersonService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "\uFEFFimport { StringEditor, PrefixedContext, initFormType } from \"@serenity-is/corelib\";\n\nexport interface GenreForm {\n    Name: StringEditor;\n}\n\nexport class GenreForm extends PrefixedContext {\n    static readonly formKey = 'MovieDB.Genre';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!GenreForm.init)  {\n            GenreForm.init = true;\n\n            var w0 = StringEditor;\n\n            initFormType(GenreForm, [\n                'Name', w0\n            ]);\n        }\n    }\n}", "\uFEFFimport { ColumnsBase, fieldsProxy } from \"@serenity-is/corelib\";\nimport { Column } from \"@serenity-is/sleekgrid\";\nimport { MovieCastRow } from \"./MovieCastRow\";\n\nexport interface MovieCastColumns {\n    MovieCastId: Column<MovieCastRow>;\n    MovieTitle: Column<MovieCastRow>;\n    PersonFullName: Column<MovieCastRow>;\n    Character: Column<MovieCastRow>;\n}\n\nexport class MovieCastColumns extends ColumnsBase<MovieCastRow> {\n    static readonly columnsKey = 'MovieDB.MovieCast';\n    static readonly Fields = fieldsProxy<MovieCastColumns>();\n}", "\uFEFFimport { ServiceLookupEditor, LookupEditor, StringEditor, PrefixedContext, initFormType } from \"@serenity-is/corelib\";\n\nexport interface MovieCastForm {\n    MovieId: ServiceLookupEditor;\n    PersonId: LookupEditor;\n    Character: StringEditor;\n}\n\nexport class MovieCastForm extends PrefixedContext {\n    static readonly formKey = 'MovieDB.MovieCast';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!MovieCastForm.init)  {\n            MovieCastForm.init = true;\n\n            var w0 = ServiceLookupEditor;\n            var w1 = LookupEditor;\n            var w2 = StringEditor;\n\n            initFormType(MovieCastForm, [\n                'MovieId', w0,\n                'PersonId', w1,\n                'Character', w2\n            ]);\n        }\n    }\n}", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib\";\n\nexport interface MovieCastRow {\n    MovieCastId?: number;\n    MovieId?: number;\n    PersonId?: number;\n    Character?: string;\n    MovieTitle?: string;\n    PersonFullName?: string;\n}\n\nexport abstract class MovieCastRow {\n    static readonly idProperty = 'MovieCastId';\n    static readonly nameProperty = 'Character';\n    static readonly localTextPrefix = 'MovieDB.MovieCast';\n    static readonly deletePermission = 'Administration:General';\n    static readonly insertPermission = 'Administration:General';\n    static readonly readPermission = 'Administration:General';\n    static readonly updatePermission = 'Administration:General';\n\n    static readonly Fields = fieldsProxy<MovieCastRow>();\n}", "\uFEFFimport { SaveRequest, SaveResponse, ServiceOptions, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse, serviceRequest } from \"@serenity-is/corelib\";\nimport { MovieCastRow } from \"./MovieCastRow\";\n\nexport namespace MovieCastService {\n    export const baseUrl = 'MovieDB/MovieCast';\n\n    export declare function Create(request: SaveRequest<MovieCastRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): PromiseLike<SaveResponse>;\n    export declare function Update(request: SaveRequest<MovieCastRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): PromiseLike<SaveResponse>;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): PromiseLike<DeleteResponse>;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<MovieCastRow>) => void, opt?: ServiceOptions<any>): PromiseLike<RetrieveResponse<MovieCastRow>>;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<MovieCastRow>) => void, opt?: ServiceOptions<any>): PromiseLike<ListResponse<MovieCastRow>>;\n\n    export const Methods = {\n        Create: \"MovieDB/MovieCast/Create\",\n        Update: \"MovieDB/MovieCast/Update\",\n        Delete: \"MovieDB/MovieCast/Delete\",\n        Retrieve: \"MovieDB/MovieCast/Retrieve\",\n        List: \"MovieDB/MovieCast/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>MovieCastService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "\uFEFFimport { StringEditor, TextAreaEditor, IntegerEditor, DateEditor, EnumEditor, LookupEditor, PrefixedContext, initFormType } from \"@serenity-is/corelib\";\nimport { MovieCastEditor } from \"../../MovieDB/MovieCast/MovieCastEditor\";\nimport { MovieKind } from \"../Modules/MovieDB.Movie.MovieKind\";\n\nexport interface MovieForm {\n    Title: StringEditor;\n    Description: TextAreaEditor;\n    CastList: MovieCastEditor;\n    Storyline: TextAreaEditor;\n    Year: IntegerEditor;\n    ReleaseDate: DateEditor;\n    Runtime: IntegerEditor;\n    Kind: EnumEditor;\n    GenreList: LookupEditor;\n}\n\nexport class MovieForm extends PrefixedContext {\n    static readonly formKey = 'MovieDB.Movie';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!MovieForm.init)  {\n            MovieForm.init = true;\n\n            var w0 = StringEditor;\n            var w1 = TextAreaEditor;\n            var w2 = MovieCastEditor;\n            var w3 = IntegerEditor;\n            var w4 = DateEditor;\n            var w5 = EnumEditor;\n            var w6 = LookupEditor;\n\n            initFormType(MovieForm, [\n                'Title', w0,\n                'Description', w1,\n                'CastList', w2,\n                'Storyline', w1,\n                'Year', w3,\n                'ReleaseDate', w4,\n                'Runtime', w3,\n                'Kind', w5,\n                'GenreList', w6\n            ]);\n        }\n    }\n}\n\nqueueMicrotask(() => [MovieKind]); // referenced types", "import { Decorators, EntityGrid, WidgetProps } from '@serenity-is/corelib';\nimport { GridEditorBase } from '@serenity-is/extensions';\r\nimport { MovieCastColumns, MovieCastRow, MovieCastService } from '../../ServerTypes/MovieDB';\r\n\r\n@Decorators.registerEditor(\"Movie.MovieDB.MovieCastEditor\")\r\nexport class MovieCastEditor<P = {}> extends GridEditorBase<MovieCastRow, P> {\r\n    protected getColumnsKey() { return MovieCastColumns.columnsKey }\r\n    protected getLocalTextPrefix() { return MovieCastRow.localTextPrefix; }\r\n\r\n    constructor(props: WidgetProps<P>) {\r\n        super(props);\n    }\n}", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib\";\n\nexport interface MovieGenresRow {\n    MovieGenreId?: number;\n    MovieId?: number;\n    GenreId?: number;\n    MovieTitle?: string;\n    GenreName?: string;\n}\n\nexport abstract class MovieGenresRow {\n    static readonly idProperty = 'MovieGenreId';\n    static readonly localTextPrefix = 'MovieDB.MovieGenres';\n    static readonly deletePermission = 'Administration:General';\n    static readonly insertPermission = 'Administration:General';\n    static readonly readPermission = 'Administration:General';\n    static readonly updatePermission = 'Administration:General';\n\n    static readonly Fields = fieldsProxy<MovieGenresRow>();\n}", "\uFEFFimport { SaveRequest, SaveResponse, ServiceOptions, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse, serviceRequest } from \"@serenity-is/corelib\";\nimport { MovieGenresRow } from \"./MovieGenresRow\";\n\nexport namespace MovieGenresService {\n    export const baseUrl = 'MovieDB/MovieGenres';\n\n    export declare function Create(request: SaveRequest<MovieGenresRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): PromiseLike<SaveResponse>;\n    export declare function Update(request: SaveRequest<MovieGenresRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): PromiseLike<SaveResponse>;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): PromiseLike<DeleteResponse>;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<MovieGenresRow>) => void, opt?: ServiceOptions<any>): PromiseLike<RetrieveResponse<MovieGenresRow>>;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<MovieGenresRow>) => void, opt?: ServiceOptions<any>): PromiseLike<ListResponse<MovieGenresRow>>;\n\n    export const Methods = {\n        Create: \"MovieDB/MovieGenres/Create\",\n        Update: \"MovieDB/MovieGenres/Update\",\n        Delete: \"MovieDB/MovieGenres/Delete\",\n        Retrieve: \"MovieDB/MovieGenres/Retrieve\",\n        List: \"MovieDB/MovieGenres/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>MovieGenresService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "\uFEFFimport { StringEditor, DateEditor, EnumEditor, IntegerEditor, PrefixedContext, initFormType } from \"@serenity-is/corelib\";\nimport { Gender } from \"../Modules/MovieDB.Person.Gender\";\n\nexport interface PersonForm {\n    FirstName: StringEditor;\n    LastName: StringEditor;\n    BirthDate: DateEditor;\n    BirthPlace: StringEditor;\n    Gender: EnumEditor;\n    Height: IntegerEditor;\n}\n\nexport class PersonForm extends PrefixedContext {\n    static readonly formKey = 'MovieDB.Person';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!PersonForm.init)  {\n            PersonForm.init = true;\n\n            var w0 = StringEditor;\n            var w1 = DateEditor;\n            var w2 = EnumEditor;\n            var w3 = IntegerEditor;\n\n            initFormType(PersonForm, [\n                'FirstName', w0,\n                'LastName', w0,\n                'BirthDate', w1,\n                'BirthPlace', w0,\n                'Gender', w2,\n                'Height', w3\n            ]);\n        }\n    }\n}\n\nqueueMicrotask(() => [Gender]); // referenced types"],
  "mappings": "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",
  "names": ["require_Serenity", "__commonJSMin", "exports", "module", "import_corelib", "_GenreColumns", "__name", "GenreColumns", "import_corelib", "_GenreRow", "__name", "GenreRow", "import_corelib", "GenreService", "x", "r", "s", "o", "import_corelib", "import_corelib", "lookup", "promise", "_GenreListFormatter_decorators", "_init", "_GenreListFormatter", "ctx", "idList", "byId", "x", "z", "GenreRow", "l", "_a", "__decoratorStart", "__decorateElement", "__name", "__runInitializers", "GenreListFormatter", "import_corelib", "MovieKind", "_MovieColumns", "__name", "MovieColumns", "MovieKind", "GenreListFormatter", "import_corelib", "_MovieRow", "__name", "MovieRow", "import_corelib", "MovieService", "x", "r", "s", "o", "import_corelib", "_PersonColumns", "__name", "PersonColumns", "Gender", "import_corelib", "_PersonRow", "__name", "PersonRow", "import_corelib", "PersonService", "x", "r", "s", "o", "import_corelib", "_GenreForm", "prefix", "w0", "__name", "GenreForm", "import_corelib", "_MovieCastColumns", "__name", "MovieCastColumns", "import_corelib", "_MovieCastForm", "prefix", "w0", "w1", "w2", "__name", "MovieCastForm", "import_corelib", "_MovieCastRow", "__name", "MovieCastRow", "import_corelib", "MovieCastService", "x", "r", "s", "o", "import_corelib", "import_corelib", "import_extensions", "_MovieCastEditor_decorators", "_init", "_a", "_MovieCastEditor", "MovieCastColumns", "MovieCastRow", "props", "__decoratorStart", "__decorateElement", "__name", "__runInitializers", "MovieCastEditor", "_MovieForm", "prefix", "w0", "w1", "w2", "MovieCastEditor", "w3", "w4", "w5", "w6", "__name", "MovieForm", "MovieKind", "import_corelib", "_MovieGenresRow", "__name", "MovieGenresRow", "import_corelib", "MovieGenresService", "x", "r", "s", "o", "import_corelib", "_PersonForm", "prefix", "w0", "w1", "w2", "w3", "__name", "PersonForm", "Gender"]
}
