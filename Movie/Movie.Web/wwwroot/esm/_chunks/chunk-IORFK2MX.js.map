{
  "version": 3,
  "sources": ["../../../Modules/ServerTypes/Club/ClubColumns.ts", "../../../Modules/ServerTypes/Club/ClubRow.ts", "../../../Modules/ServerTypes/Club/ClubService.ts", "../../../Modules/ServerTypes/Club/EmployeeColumns.ts", "../../../Modules/Club/Club/ClubDialog.tsx", "../../../Modules/ServerTypes/Club/ClubForm.ts", "../../../Modules/ServerTypes/Club/EmployeeForm.ts", "../../../Modules/ServerTypes/Club/EmployeeRow.ts", "../../../Modules/ServerTypes/Club/EmployeeService.ts"],
  "sourcesContent": ["\uFEFFimport { ColumnsBase, fieldsProxy } from \"@serenity-is/corelib\";\nimport { Column } from \"@serenity-is/sleekgrid\";\nimport { ClubRow } from \"./ClubRow\";\n\nexport interface ClubColumns {\n    ClubId: Column<ClubRow>;\n    ClubName: Column<ClubRow>;\n    Code: Column<ClubRow>;\n    PingTime: Column<ClubRow>;\n}\n\nexport class ClubColumns extends ColumnsBase<ClubRow> {\n    static readonly columnsKey = 'Club.Club';\n    static readonly Fields = fieldsProxy<ClubColumns>();\n}", "\uFEFFimport { getLookup, getLookupAsync, fieldsProxy } from \"@serenity-is/corelib\";\n\nexport interface ClubRow {\n    ClubId?: number;\n    ClubName?: string;\n    Code?: string;\n    PingTime?: string;\n}\n\nexport abstract class ClubRow {\n    static readonly idProperty = 'ClubId';\n    static readonly nameProperty = 'ClubName';\n    static readonly localTextPrefix = 'Club.Club';\n    static readonly lookupKey = 'Club.Club';\n\n    /** @deprecated use getLookupAsync instead */\n    static getLookup() { return getLookup<ClubRow>('Club.Club') }\n    static async getLookupAsync() { return getLookupAsync<ClubRow>('Club.Club') }\n\n    static readonly deletePermission = 'Administration:General';\n    static readonly insertPermission = 'Administration:General';\n    static readonly readPermission = 'Administration:General';\n    static readonly updatePermission = 'Administration:General';\n\n    static readonly Fields = fieldsProxy<ClubRow>();\n}", "\uFEFFimport { SaveRequest, SaveResponse, ServiceOptions, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse, serviceRequest } from \"@serenity-is/corelib\";\nimport { ClubRow } from \"./ClubRow\";\n\nexport namespace ClubService {\n    export const baseUrl = 'Club/Club';\n\n    export declare function Create(request: SaveRequest<ClubRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): PromiseLike<SaveResponse>;\n    export declare function Update(request: SaveRequest<ClubRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): PromiseLike<SaveResponse>;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): PromiseLike<DeleteResponse>;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<ClubRow>) => void, opt?: ServiceOptions<any>): PromiseLike<RetrieveResponse<ClubRow>>;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<ClubRow>) => void, opt?: ServiceOptions<any>): PromiseLike<ListResponse<ClubRow>>;\n\n    export const Methods = {\n        Create: \"Club/Club/Create\",\n        Update: \"Club/Club/Update\",\n        Delete: \"Club/Club/Delete\",\n        Retrieve: \"Club/Club/Retrieve\",\n        List: \"Club/Club/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>ClubService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "\uFEFFimport { ColumnsBase, fieldsProxy } from \"@serenity-is/corelib\";\nimport { Column } from \"@serenity-is/sleekgrid\";\nimport { Gender } from \"../Modules/MovieDB.Person.Gender\";\nimport { EmployeeRow } from \"./EmployeeRow\";\n\nexport interface EmployeeColumns {\n    EmployeeId: Column<EmployeeRow>;\n    FirstName: Column<EmployeeRow>;\n    LastName: Column<EmployeeRow>;\n    ClubName: Column<EmployeeRow>;\n    BirthDate: Column<EmployeeRow>;\n    Address: Column<EmployeeRow>;\n    Gender: Column<EmployeeRow>;\n    Salary: Column<EmployeeRow>;\n}\n\nexport class EmployeeColumns extends ColumnsBase<EmployeeRow> {\n    static readonly columnsKey = 'Club.Employee';\n    static readonly Fields = fieldsProxy<EmployeeColumns>();\n}\n\nqueueMicrotask(() => [Gender]); // referenced types", "\uFEFFimport { Decorators, EntityDialog } from '@serenity-is/corelib';\r\nimport { ClubForm, ClubRow, ClubService } from '../../ServerTypes/Club';\r\n\r\n@Decorators.registerClass('Movie.Club.ClubDialog')\nexport class ClubDialog extends EntityDialog<ClubRow, any> {\n    protected getFormKey() { return ClubForm.formKey; }\n    protected getRowDefinition() { return ClubRow; }\n    protected getService() { return ClubService.baseUrl; }\n\n    protected form = new ClubForm(this.idPrefix);\n}", "\uFEFFimport { StringEditor, DateEditor, PrefixedContext, initFormType } from \"@serenity-is/corelib\";\n\nexport interface ClubForm {\n    ClubName: StringEditor;\n    Code: StringEditor;\n    PingTime: DateEditor;\n}\n\nexport class ClubForm extends PrefixedContext {\n    static readonly formKey = 'Club.Club';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!ClubForm.init)  {\n            ClubForm.init = true;\n\n            var w0 = StringEditor;\n            var w1 = DateEditor;\n\n            initFormType(ClubForm, [\n                'ClubName', w0,\n                'Code', w0,\n                'PingTime', w1\n            ]);\n        }\n    }\n}", "\uFEFFimport { StringEditor, DateEditor, LookupEditor, EnumEditor, DecimalEditor, PrefixedContext, initFormType } from \"@serenity-is/corelib\";\nimport { ClubDialog } from \"../../Club/Club/ClubDialog\";\nimport { Gender } from \"../Modules/MovieDB.Person.Gender\";\n\nexport interface EmployeeForm {\n    FirstName: StringEditor;\n    LastName: StringEditor;\n    BirthDate: DateEditor;\n    Address: StringEditor;\n    ClubId: LookupEditor;\n    Gender: EnumEditor;\n    Salary: DecimalEditor;\n}\n\nexport class EmployeeForm extends PrefixedContext {\n    static readonly formKey = 'Club.Employee';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!EmployeeForm.init)  {\n            EmployeeForm.init = true;\n\n            var w0 = StringEditor;\n            var w1 = DateEditor;\n            var w2 = LookupEditor;\n            var w3 = EnumEditor;\n            var w4 = DecimalEditor;\n\n            initFormType(EmployeeForm, [\n                'FirstName', w0,\n                'LastName', w0,\n                'BirthDate', w1,\n                'Address', w0,\n                'ClubId', w2,\n                'Gender', w3,\n                'Salary', w4\n            ]);\n        }\n    }\n}\n\nqueueMicrotask(() => [ClubDialog, Gender]); // referenced types", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib\";\nimport { Gender } from \"../Modules/MovieDB.Person.Gender\";\n\nexport interface EmployeeRow {\n    EmployeeId?: number;\n    FirstName?: string;\n    LastName?: string;\n    BirthDate?: string;\n    Address?: string;\n    Gender?: Gender;\n    Salary?: number;\n    ClubId?: number;\n    ClubName?: string;\n}\n\nexport abstract class EmployeeRow {\n    static readonly idProperty = 'EmployeeId';\n    static readonly nameProperty = 'FirstName';\n    static readonly localTextPrefix = 'Club.Employee';\n    static readonly deletePermission = 'Administration:General';\n    static readonly insertPermission = 'Administration:General';\n    static readonly readPermission = 'Administration:General';\n    static readonly updatePermission = 'Administration:General';\n\n    static readonly Fields = fieldsProxy<EmployeeRow>();\n}", "\uFEFFimport { SaveRequest, SaveResponse, ServiceOptions, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse, serviceRequest } from \"@serenity-is/corelib\";\nimport { EmployeeRow } from \"./EmployeeRow\";\n\nexport namespace EmployeeService {\n    export const baseUrl = 'Club/Employee';\n\n    export declare function Create(request: SaveRequest<EmployeeRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): PromiseLike<SaveResponse>;\n    export declare function Update(request: SaveRequest<EmployeeRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): PromiseLike<SaveResponse>;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): PromiseLike<DeleteResponse>;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<EmployeeRow>) => void, opt?: ServiceOptions<any>): PromiseLike<RetrieveResponse<EmployeeRow>>;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<EmployeeRow>) => void, opt?: ServiceOptions<any>): PromiseLike<ListResponse<EmployeeRow>>;\n\n    export const Methods = {\n        Create: \"Club/Employee/Create\",\n        Update: \"Club/Employee/Update\",\n        Delete: \"Club/Employee/Delete\",\n        Retrieve: \"Club/Employee/Retrieve\",\n        List: \"Club/Employee/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>EmployeeService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}"],
  "mappings": "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",
  "names": ["import_corelib", "_ClubColumns", "__name", "ClubColumns", "import_corelib", "_ClubRow", "__name", "ClubRow", "import_corelib", "ClubService", "x", "r", "s", "o", "import_corelib", "_EmployeeColumns", "__name", "EmployeeColumns", "Gender", "import_corelib", "import_corelib", "_ClubForm", "prefix", "w0", "w1", "__name", "ClubForm", "import_corelib", "_EmployeeForm", "prefix", "w0", "w1", "w2", "w3", "w4", "__name", "EmployeeForm", "ClubDialog", "Gender", "import_corelib", "_EmployeeRow", "__name", "EmployeeRow", "import_corelib", "EmployeeService", "x", "r", "s", "o", "_ClubDialog_decorators", "_init", "_a", "_ClubDialog", "ClubForm", "ClubRow", "ClubService", "__decoratorStart", "__decorateElement", "__name", "__runInitializers", "ClubDialog"]
}
